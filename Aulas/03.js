// ----------------------------------------
// üß© Fun√ß√µes em JavaScript
// ----------------------------------------
// Uma fun√ß√£o √© um bloco de c√≥digo que executa uma tarefa.
// Ela pode receber valores (par√¢metros) e devolver um resultado (retorno).

// Sintaxe b√°sica:
// function nomeDaFuncao(parametros) {
//     // c√≥digo a ser executado
//     return resultado; // (opcional)
// }

// ----------------------------------------
// üß† Fun√ß√£o sem par√¢metros e sem retorno
// ----------------------------------------
// Executa algo, mas n√£o recebe nem devolve dados.

function mostrarMensagem() {
  console.log("Ol√°! Seja bem-vindo(a)!");
}

mostrarMensagem(); // Chamando a fun√ß√£o

// Sa√≠da: Ol√°! Seja bem-vindo(a)!

// ----------------------------------------
// üë§ Fun√ß√£o com par√¢metro (mas sem retorno)
// ----------------------------------------
// Recebe um valor e usa dentro do c√≥digo, mas n√£o devolve nada.

function saudarPessoa(nome) {
  console.log("Ol√°, " + nome + "!");
}

saudarPessoa("Ana");
saudarPessoa("Jos√©");

// Sa√≠da:
// Ol√°, Ana!
// Ol√°, Jos√©!

// ----------------------------------------
// üîÅ Fun√ß√£o com retorno (mas sem par√¢metro)
// ----------------------------------------
// Devolve um valor usando a palavra-chave "return".

function obterMensagem() {
  return "Fun√ß√µes s√£o muito √∫teis!";
}

let mensagem = obterMensagem(); // Guarda o valor retornado
console.log(mensagem);

// Sa√≠da: Fun√ß√µes s√£o muito √∫teis!

// ----------------------------------------
// ‚öôÔ∏è Fun√ß√£o com par√¢metros e com retorno
// ----------------------------------------
// Recebe valores, processa e devolve um resultado.

function somar(a, b) {
  return a + b;
}

let resultado = somar(5, 3);
console.log("O resultado da soma √©:", resultado);

// Sa√≠da: O resultado da soma √©: 8

// ----------------------------------------
// üí¨ Diferen√ßa entre mostrar e retornar
// ----------------------------------------
// console.log ‚Üí mostra na tela
// return ‚Üí devolve o valor para quem chamou

function mostrarSoma(x, y) {
  console.log("Soma:", x + y); // apenas mostra
}

function retornarSoma(x, y) {
  return x + y; // devolve o valor
}

mostrarSoma(2, 3); // mostra "Soma: 5"
let total = retornarSoma(2, 3);
console.log("Total retornado:", total);

// ----------------------------------------
// ‚ö° Arrow Function (forma moderna)
// ----------------------------------------
// √â uma forma mais curta de escrever fun√ß√µes.

const dobrar = (numero) => {
  return numero * 2;
};

console.log("Dobro de 5 √©:", dobrar(5));

// Se tiver s√≥ uma linha, pode simplificar:
const triplo = numero => numero * 3;
console.log("Triplo de 4 √©:", triplo(4));

// ----------------------------------------
// üßÆ Exemplos pr√°ticos
// ----------------------------------------

// ‚úÖ Verificar se √© maior de idade
function verificarIdade(idade) {
  if (idade >= 18) {
    return "Maior de idade";
  } else {
    return "Menor de idade";
  }
}

console.log(verificarIdade(20));
console.log(verificarIdade(15));

// ‚úÖ Calcular m√©dia de 3 notas
function calcularMedia(n1, n2, n3) {
  let media = (n1 + n2 + n3) / 3;
  return media;
}

let mediaAluno = calcularMedia(7, 8, 9);
console.log("M√©dia final:", mediaAluno);

// ‚úÖ Retornar o maior n√∫mero
function maiorNumero(a, b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

console.log("Maior n√∫mero √©:", maiorNumero(10, 7));
